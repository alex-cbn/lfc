Terminals unused in grammar

   TOK_ERROR
   uniexpr
   multiexpr


Grammar

    0 $accept: S $end

    1 S: %empty
    2  | TOK_PROGRAM TOK_VARIABLE B
    3  | error ';' S

    4 $@1: %empty

    5 B: $@1 TOK_BEGIN INST TOK_END

    6 INST: %empty

    7 $@2: %empty

    8 $@3: %empty

    9 INST: $@2 I $@3 ';' INST

   10 $@4: %empty

   11 INST: IFDECL $@4 INST
   12     | IFDECL ELSEDECL INST

   13 I: REPUNTIL
   14  | TOK_VARIABLE '=' E_BFIS
   15  | TOK_VARIABLE '=' BOOLE
   16  | TOK_DATA_TYPE TOK_VARIABLE '=' E_BFIS
   17  | TOK_DATA_TYPE TOK_VARIABLE
   18  | TOK_PRINT TOK_VARIABLE
   19  | TOK_PRINT TOK_STRING_VALUE

   20 $@5: %empty

   21 ELSEDECL: $@5 TOK_ELSE B

   22 $@6: %empty

   23 $@7: %empty

   24 IFDECL: $@6 TOK_IF TOK_LEFT BOOLE $@7 TOK_RIGHT TOK_THEN B

   25 $@8: %empty

   26 BOOLE: E_BFIS $@8 TOK_EQU E_BFIS

   27 $@9: %empty

   28 BOOLE: E_BFIS $@9 TOK_NEQ E_BFIS

   29 $@10: %empty

   30 BOOLE: E_BFIS $@10 TOK_GTR E_BFIS

   31 $@11: %empty

   32 BOOLE: E_BFIS $@11 TOK_LSS E_BFIS

   33 $@12: %empty

   34 BOOLE: E_BFIS $@12 TOK_LEQ E_BFIS

   35 $@13: %empty

   36 BOOLE: E_BFIS $@13 TOK_GEQ E_BFIS

   37 $@14: %empty

   38 $@15: %empty

   39 REPUNTIL: $@14 TOK_REPEAT B TOK_UNTIL TOK_LEFT BOOLE $@15 TOK_RIGHT

   40 E_BFIS: E_BFIS TOK_PLUS E_BFIS
   41       | E_BFIS TOK_MINUS E_BFIS
   42       | E_BFIS TOK_MULTIPLY E_BFIS
   43       | E_BFIS TOK_DIVIDE E_BFIS

   44 $@16: %empty

   45 E_BFIS: TOK_LEFT $@16 E_BFIS TOK_RIGHT
   46       | TOK_VARIABLE
   47       | TOK_INT_VALUE
   48       | TOK_FLOAT_VALUE
   49       | TOK_STRING_VALUE
   50       | TOK_TRUE
   51       | TOK_FALSE


Terminals, with rules where they appear

$end (0) 0
';' (59) 3 9
'=' (61) 14 15 16
error (256) 3
TOK_PROGRAM (258) 2
TOK_PLUS (259) 40
TOK_MINUS (260) 41
TOK_MULTIPLY (261) 42
TOK_DIVIDE (262) 43
TOK_LEFT (263) 24 39 45
TOK_RIGHT (264) 24 39 45
TOK_NEQ (265) 28
TOK_EQU (266) 26
TOK_GTR (267) 30
TOK_LSS (268) 32
TOK_LEQ (269) 34
TOK_GEQ (270) 36
TOK_BEGIN (271) 5
TOK_END (272) 5
TOK_REPEAT (273) 39
TOK_UNTIL (274) 39
TOK_IF (275) 24
TOK_ELSE (276) 21
TOK_PRINT (277) 18 19
TOK_ERROR (278)
TOK_THEN (279) 24
ifx (280)
TOK_INT_VALUE (281) 47
TOK_FLOAT_VALUE (282) 48
TOK_TRUE (283) 50
TOK_FALSE (284) 51
TOK_STRING_VALUE (285) 19 49
TOK_DATA_TYPE (286) 16 17
TOK_VARIABLE (287) 2 14 15 16 17 18 46
uniexpr (288)
multiexpr (289)


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
S (38)
    on left: 1 2 3, on right: 0 3
B (39)
    on left: 5, on right: 2 21 24 39
$@1 (40)
    on left: 4, on right: 5
INST (41)
    on left: 6 9 11 12, on right: 5 9 11 12
$@2 (42)
    on left: 7, on right: 9
$@3 (43)
    on left: 8, on right: 9
$@4 (44)
    on left: 10, on right: 11
I (45)
    on left: 13 14 15 16 17 18 19, on right: 9
ELSEDECL (46)
    on left: 21, on right: 12
$@5 (47)
    on left: 20, on right: 21
IFDECL (48)
    on left: 24, on right: 11 12
$@6 (49)
    on left: 22, on right: 24
$@7 (50)
    on left: 23, on right: 24
BOOLE (51)
    on left: 26 28 30 32 34 36, on right: 15 24 39
$@8 (52)
    on left: 25, on right: 26
$@9 (53)
    on left: 27, on right: 28
$@10 (54)
    on left: 29, on right: 30
$@11 (55)
    on left: 31, on right: 32
$@12 (56)
    on left: 33, on right: 34
$@13 (57)
    on left: 35, on right: 36
REPUNTIL (58)
    on left: 39, on right: 13
$@14 (59)
    on left: 37, on right: 39
$@15 (60)
    on left: 38, on right: 39
E_BFIS (61)
    on left: 40 41 42 43 45 46 47 48 49 50 51, on right: 14 16 26 28
    30 32 34 36 40 41 42 43 45
$@16 (62)
    on left: 44, on right: 45


State 0

    0 $accept: . S $end

    error        shift, and go to state 1
    TOK_PROGRAM  shift, and go to state 2

    $end  reduce using rule 1 (S)

    S  go to state 3


State 1

    3 S: error . ';' S

    ';'  shift, and go to state 4


State 2

    2 S: TOK_PROGRAM . TOK_VARIABLE B

    TOK_VARIABLE  shift, and go to state 5


State 3

    0 $accept: S . $end

    $end  shift, and go to state 6


State 4

    3 S: error ';' . S

    error        shift, and go to state 1
    TOK_PROGRAM  shift, and go to state 2

    $end  reduce using rule 1 (S)

    S  go to state 7


State 5

    2 S: TOK_PROGRAM TOK_VARIABLE . B

    $default  reduce using rule 4 ($@1)

    B    go to state 8
    $@1  go to state 9


State 6

    0 $accept: S $end .

    $default  accept


State 7

    3 S: error ';' S .

    $default  reduce using rule 3 (S)


State 8

    2 S: TOK_PROGRAM TOK_VARIABLE B .

    $default  reduce using rule 2 (S)


State 9

    5 B: $@1 . TOK_BEGIN INST TOK_END

    TOK_BEGIN  shift, and go to state 10


State 10

    5 B: $@1 TOK_BEGIN . INST TOK_END

    TOK_END   reduce using rule 6 (INST)
    TOK_IF    reduce using rule 22 ($@6)
    $default  reduce using rule 7 ($@2)

    INST    go to state 11
    $@2     go to state 12
    IFDECL  go to state 13
    $@6     go to state 14


State 11

    5 B: $@1 TOK_BEGIN INST . TOK_END

    TOK_END  shift, and go to state 15


State 12

    9 INST: $@2 . I $@3 ';' INST

    TOK_PRINT      shift, and go to state 16
    TOK_DATA_TYPE  shift, and go to state 17
    TOK_VARIABLE   shift, and go to state 18

    $default  reduce using rule 37 ($@14)

    I         go to state 19
    REPUNTIL  go to state 20
    $@14      go to state 21


State 13

   11 INST: IFDECL . $@4 INST
   12     | IFDECL . ELSEDECL INST

    TOK_ELSE  reduce using rule 20 ($@5)
    $default  reduce using rule 10 ($@4)

    $@4       go to state 22
    ELSEDECL  go to state 23
    $@5       go to state 24


State 14

   24 IFDECL: $@6 . TOK_IF TOK_LEFT BOOLE $@7 TOK_RIGHT TOK_THEN B

    TOK_IF  shift, and go to state 25


State 15

    5 B: $@1 TOK_BEGIN INST TOK_END .

    $default  reduce using rule 5 (B)


State 16

   18 I: TOK_PRINT . TOK_VARIABLE
   19  | TOK_PRINT . TOK_STRING_VALUE

    TOK_STRING_VALUE  shift, and go to state 26
    TOK_VARIABLE      shift, and go to state 27


State 17

   16 I: TOK_DATA_TYPE . TOK_VARIABLE '=' E_BFIS
   17  | TOK_DATA_TYPE . TOK_VARIABLE

    TOK_VARIABLE  shift, and go to state 28


State 18

   14 I: TOK_VARIABLE . '=' E_BFIS
   15  | TOK_VARIABLE . '=' BOOLE

    '='  shift, and go to state 29


State 19

    9 INST: $@2 I . $@3 ';' INST

    $default  reduce using rule 8 ($@3)

    $@3  go to state 30


State 20

   13 I: REPUNTIL .

    $default  reduce using rule 13 (I)


State 21

   39 REPUNTIL: $@14 . TOK_REPEAT B TOK_UNTIL TOK_LEFT BOOLE $@15 TOK_RIGHT

    TOK_REPEAT  shift, and go to state 31


State 22

   11 INST: IFDECL $@4 . INST

    TOK_END   reduce using rule 6 (INST)
    TOK_IF    reduce using rule 22 ($@6)
    $default  reduce using rule 7 ($@2)

    INST    go to state 32
    $@2     go to state 12
    IFDECL  go to state 13
    $@6     go to state 14


State 23

   12 INST: IFDECL ELSEDECL . INST

    TOK_END   reduce using rule 6 (INST)
    TOK_IF    reduce using rule 22 ($@6)
    $default  reduce using rule 7 ($@2)

    INST    go to state 33
    $@2     go to state 12
    IFDECL  go to state 13
    $@6     go to state 14


State 24

   21 ELSEDECL: $@5 . TOK_ELSE B

    TOK_ELSE  shift, and go to state 34


State 25

   24 IFDECL: $@6 TOK_IF . TOK_LEFT BOOLE $@7 TOK_RIGHT TOK_THEN B

    TOK_LEFT  shift, and go to state 35


State 26

   19 I: TOK_PRINT TOK_STRING_VALUE .

    $default  reduce using rule 19 (I)


State 27

   18 I: TOK_PRINT TOK_VARIABLE .

    $default  reduce using rule 18 (I)


State 28

   16 I: TOK_DATA_TYPE TOK_VARIABLE . '=' E_BFIS
   17  | TOK_DATA_TYPE TOK_VARIABLE .

    '='  shift, and go to state 36

    $default  reduce using rule 17 (I)


State 29

   14 I: TOK_VARIABLE '=' . E_BFIS
   15  | TOK_VARIABLE '=' . BOOLE

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    BOOLE   go to state 44
    E_BFIS  go to state 45


State 30

    9 INST: $@2 I $@3 . ';' INST

    ';'  shift, and go to state 46


State 31

   39 REPUNTIL: $@14 TOK_REPEAT . B TOK_UNTIL TOK_LEFT BOOLE $@15 TOK_RIGHT

    $default  reduce using rule 4 ($@1)

    B    go to state 47
    $@1  go to state 9


State 32

   11 INST: IFDECL $@4 INST .

    $default  reduce using rule 11 (INST)


State 33

   12 INST: IFDECL ELSEDECL INST .

    $default  reduce using rule 12 (INST)


State 34

   21 ELSEDECL: $@5 TOK_ELSE . B

    $default  reduce using rule 4 ($@1)

    B    go to state 48
    $@1  go to state 9


State 35

   24 IFDECL: $@6 TOK_IF TOK_LEFT . BOOLE $@7 TOK_RIGHT TOK_THEN B

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    BOOLE   go to state 49
    E_BFIS  go to state 50


State 36

   16 I: TOK_DATA_TYPE TOK_VARIABLE '=' . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 51


State 37

   45 E_BFIS: TOK_LEFT . $@16 E_BFIS TOK_RIGHT

    $default  reduce using rule 44 ($@16)

    $@16  go to state 52


State 38

   47 E_BFIS: TOK_INT_VALUE .

    $default  reduce using rule 47 (E_BFIS)


State 39

   48 E_BFIS: TOK_FLOAT_VALUE .

    $default  reduce using rule 48 (E_BFIS)


State 40

   50 E_BFIS: TOK_TRUE .

    $default  reduce using rule 50 (E_BFIS)


State 41

   51 E_BFIS: TOK_FALSE .

    $default  reduce using rule 51 (E_BFIS)


State 42

   49 E_BFIS: TOK_STRING_VALUE .

    $default  reduce using rule 49 (E_BFIS)


State 43

   46 E_BFIS: TOK_VARIABLE .

    $default  reduce using rule 46 (E_BFIS)


State 44

   15 I: TOK_VARIABLE '=' BOOLE .

    $default  reduce using rule 15 (I)


State 45

   14 I: TOK_VARIABLE '=' E_BFIS .
   26 BOOLE: E_BFIS . $@8 TOK_EQU E_BFIS
   28      | E_BFIS . $@9 TOK_NEQ E_BFIS
   30      | E_BFIS . $@10 TOK_GTR E_BFIS
   32      | E_BFIS . $@11 TOK_LSS E_BFIS
   34      | E_BFIS . $@12 TOK_LEQ E_BFIS
   36      | E_BFIS . $@13 TOK_GEQ E_BFIS
   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    TOK_NEQ   reduce using rule 27 ($@9)
    TOK_EQU   reduce using rule 25 ($@8)
    TOK_GTR   reduce using rule 29 ($@10)
    TOK_LSS   reduce using rule 31 ($@11)
    TOK_LEQ   reduce using rule 33 ($@12)
    TOK_GEQ   reduce using rule 35 ($@13)
    $default  reduce using rule 14 (I)

    $@8   go to state 57
    $@9   go to state 58
    $@10  go to state 59
    $@11  go to state 60
    $@12  go to state 61
    $@13  go to state 62


State 46

    9 INST: $@2 I $@3 ';' . INST

    TOK_END   reduce using rule 6 (INST)
    TOK_IF    reduce using rule 22 ($@6)
    $default  reduce using rule 7 ($@2)

    INST    go to state 63
    $@2     go to state 12
    IFDECL  go to state 13
    $@6     go to state 14


State 47

   39 REPUNTIL: $@14 TOK_REPEAT B . TOK_UNTIL TOK_LEFT BOOLE $@15 TOK_RIGHT

    TOK_UNTIL  shift, and go to state 64


State 48

   21 ELSEDECL: $@5 TOK_ELSE B .

    $default  reduce using rule 21 (ELSEDECL)


State 49

   24 IFDECL: $@6 TOK_IF TOK_LEFT BOOLE . $@7 TOK_RIGHT TOK_THEN B

    $default  reduce using rule 23 ($@7)

    $@7  go to state 65


State 50

   26 BOOLE: E_BFIS . $@8 TOK_EQU E_BFIS
   28      | E_BFIS . $@9 TOK_NEQ E_BFIS
   30      | E_BFIS . $@10 TOK_GTR E_BFIS
   32      | E_BFIS . $@11 TOK_LSS E_BFIS
   34      | E_BFIS . $@12 TOK_LEQ E_BFIS
   36      | E_BFIS . $@13 TOK_GEQ E_BFIS
   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    TOK_NEQ   reduce using rule 27 ($@9)
    TOK_GTR   reduce using rule 29 ($@10)
    TOK_LSS   reduce using rule 31 ($@11)
    TOK_LEQ   reduce using rule 33 ($@12)
    TOK_GEQ   reduce using rule 35 ($@13)
    $default  reduce using rule 25 ($@8)

    $@8   go to state 57
    $@9   go to state 58
    $@10  go to state 59
    $@11  go to state 60
    $@12  go to state 61
    $@13  go to state 62


State 51

   16 I: TOK_DATA_TYPE TOK_VARIABLE '=' E_BFIS .
   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    $default  reduce using rule 16 (I)


State 52

   45 E_BFIS: TOK_LEFT $@16 . E_BFIS TOK_RIGHT

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 66


State 53

   40 E_BFIS: E_BFIS TOK_PLUS . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 67


State 54

   41 E_BFIS: E_BFIS TOK_MINUS . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 68


State 55

   42 E_BFIS: E_BFIS TOK_MULTIPLY . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 69


State 56

   43 E_BFIS: E_BFIS TOK_DIVIDE . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 70


State 57

   26 BOOLE: E_BFIS $@8 . TOK_EQU E_BFIS

    TOK_EQU  shift, and go to state 71


State 58

   28 BOOLE: E_BFIS $@9 . TOK_NEQ E_BFIS

    TOK_NEQ  shift, and go to state 72


State 59

   30 BOOLE: E_BFIS $@10 . TOK_GTR E_BFIS

    TOK_GTR  shift, and go to state 73


State 60

   32 BOOLE: E_BFIS $@11 . TOK_LSS E_BFIS

    TOK_LSS  shift, and go to state 74


State 61

   34 BOOLE: E_BFIS $@12 . TOK_LEQ E_BFIS

    TOK_LEQ  shift, and go to state 75


State 62

   36 BOOLE: E_BFIS $@13 . TOK_GEQ E_BFIS

    TOK_GEQ  shift, and go to state 76


State 63

    9 INST: $@2 I $@3 ';' INST .

    $default  reduce using rule 9 (INST)


State 64

   39 REPUNTIL: $@14 TOK_REPEAT B TOK_UNTIL . TOK_LEFT BOOLE $@15 TOK_RIGHT

    TOK_LEFT  shift, and go to state 77


State 65

   24 IFDECL: $@6 TOK_IF TOK_LEFT BOOLE $@7 . TOK_RIGHT TOK_THEN B

    TOK_RIGHT  shift, and go to state 78


State 66

   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS
   45       | TOK_LEFT $@16 E_BFIS . TOK_RIGHT

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56
    TOK_RIGHT     shift, and go to state 79


State 67

   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   40       | E_BFIS TOK_PLUS E_BFIS .
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    $default  reduce using rule 40 (E_BFIS)


State 68

   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   41       | E_BFIS TOK_MINUS E_BFIS .
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    $default  reduce using rule 41 (E_BFIS)


State 69

   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   42       | E_BFIS TOK_MULTIPLY E_BFIS .
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    $default  reduce using rule 42 (E_BFIS)


State 70

   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS
   43       | E_BFIS TOK_DIVIDE E_BFIS .

    $default  reduce using rule 43 (E_BFIS)


State 71

   26 BOOLE: E_BFIS $@8 TOK_EQU . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 80


State 72

   28 BOOLE: E_BFIS $@9 TOK_NEQ . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 81


State 73

   30 BOOLE: E_BFIS $@10 TOK_GTR . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 82


State 74

   32 BOOLE: E_BFIS $@11 TOK_LSS . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 83


State 75

   34 BOOLE: E_BFIS $@12 TOK_LEQ . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 84


State 76

   36 BOOLE: E_BFIS $@13 TOK_GEQ . E_BFIS

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    E_BFIS  go to state 85


State 77

   39 REPUNTIL: $@14 TOK_REPEAT B TOK_UNTIL TOK_LEFT . BOOLE $@15 TOK_RIGHT

    TOK_LEFT          shift, and go to state 37
    TOK_INT_VALUE     shift, and go to state 38
    TOK_FLOAT_VALUE   shift, and go to state 39
    TOK_TRUE          shift, and go to state 40
    TOK_FALSE         shift, and go to state 41
    TOK_STRING_VALUE  shift, and go to state 42
    TOK_VARIABLE      shift, and go to state 43

    BOOLE   go to state 86
    E_BFIS  go to state 50


State 78

   24 IFDECL: $@6 TOK_IF TOK_LEFT BOOLE $@7 TOK_RIGHT . TOK_THEN B

    TOK_THEN  shift, and go to state 87


State 79

   45 E_BFIS: TOK_LEFT $@16 E_BFIS TOK_RIGHT .

    $default  reduce using rule 45 (E_BFIS)


State 80

   26 BOOLE: E_BFIS $@8 TOK_EQU E_BFIS .
   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    $default  reduce using rule 26 (BOOLE)


State 81

   28 BOOLE: E_BFIS $@9 TOK_NEQ E_BFIS .
   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    $default  reduce using rule 28 (BOOLE)


State 82

   30 BOOLE: E_BFIS $@10 TOK_GTR E_BFIS .
   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    $default  reduce using rule 30 (BOOLE)


State 83

   32 BOOLE: E_BFIS $@11 TOK_LSS E_BFIS .
   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    $default  reduce using rule 32 (BOOLE)


State 84

   34 BOOLE: E_BFIS $@12 TOK_LEQ E_BFIS .
   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    $default  reduce using rule 34 (BOOLE)


State 85

   36 BOOLE: E_BFIS $@13 TOK_GEQ E_BFIS .
   40 E_BFIS: E_BFIS . TOK_PLUS E_BFIS
   41       | E_BFIS . TOK_MINUS E_BFIS
   42       | E_BFIS . TOK_MULTIPLY E_BFIS
   43       | E_BFIS . TOK_DIVIDE E_BFIS

    TOK_PLUS      shift, and go to state 53
    TOK_MINUS     shift, and go to state 54
    TOK_MULTIPLY  shift, and go to state 55
    TOK_DIVIDE    shift, and go to state 56

    $default  reduce using rule 36 (BOOLE)


State 86

   39 REPUNTIL: $@14 TOK_REPEAT B TOK_UNTIL TOK_LEFT BOOLE . $@15 TOK_RIGHT

    $default  reduce using rule 38 ($@15)

    $@15  go to state 88


State 87

   24 IFDECL: $@6 TOK_IF TOK_LEFT BOOLE $@7 TOK_RIGHT TOK_THEN . B

    $default  reduce using rule 4 ($@1)

    B    go to state 89
    $@1  go to state 9


State 88

   39 REPUNTIL: $@14 TOK_REPEAT B TOK_UNTIL TOK_LEFT BOOLE $@15 . TOK_RIGHT

    TOK_RIGHT  shift, and go to state 90


State 89

   24 IFDECL: $@6 TOK_IF TOK_LEFT BOOLE $@7 TOK_RIGHT TOK_THEN B .

    $default  reduce using rule 24 (IFDECL)


State 90

   39 REPUNTIL: $@14 TOK_REPEAT B TOK_UNTIL TOK_LEFT BOOLE $@15 TOK_RIGHT .

    $default  reduce using rule 39 (REPUNTIL)
